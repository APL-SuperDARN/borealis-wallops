import os

Import('env')

# copy parent environment so our alterations don't affect it
env = env.Clone()

# initilize the set of targets to build
matches = []

#add util dirs to include path
for root, dirnames, filenames in os.walk('../../utils'):
    for dirname in dirnames:
        dirPath = os.path.join('../../utils',dirname)
        print('adding utils dir to path: %s' % dirPath)
        env.Append(CPPPATH=[dirPath])
        globStr = "%s/*.cpp" % dirPath
        print(globStr)
        matches.append(Glob(globStr))

# add any files in the current directory
currentDir = os.path.split(os.getcwd())[1]
print('adding current dir to path: %s' % currentDir)
env.Append(CPPPATH=['.'])
matches.append(Glob("./*.c*"))

# add files in subdirectories
for root, dirnames, filenames in os.walk(os.getcwd()):
    for dirname in dirnames:
        print('adding dir to path: %s' % dirname)
        env.Append(CPPPATH=[dirname])
        globStr = "%s/*.cpp" % dirname
        matches.append(Glob(globStr))

# debug output
# print('test env CPPPATH:')
# print(env['CPPPATH'])
# print("test files to build: ")
#print([ match[0].rstr() for match in matches])
for match in matches:
    try:
        print(match[0].rstr())
    except:
        pass


# build a program that uses the source files as a shared library
env.Program('../../bin/n200_driver', matches)